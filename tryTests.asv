clear;
clc;

%t tests for TRY
numSamples=60;
load('tryCompareRestCue.mat',"tryBatch");
restMeanTime=tryBatch{1};
restStdTime=tryBatch{2};
cueMeanTime=tryBatch{3};
cueStdTime=tryBatch{4};
%% round 1 tests
% tests: Rest vs Cue
% rest1 vs rest2
% cue1 vs cue2
[subs,sessions]=size(cueMeanTime);
%test1: all rest vs all cue
rest=restMeanTime(:);
restsig=restStdTime(:);
cue=cueMeanTime(:);
cuesig=cueStdTime(:);

[h1,p1]=ttest2(cue,rest);
%test2: rest1 vs rest2
[h2,p2]=ttest2(restMeanTime(:,1),restMeanTime(:,2));
%test3: cue1 vs cue2
[h3,p3]=ttest2(cueMeanTime(:,1),cueMeanTime(:,2));

%% round 2 tests
%samples = mu + sigma.*randn(numSamples, 1);
ki=1;
% initialize means
sess1c=cueMeanTime(ki,1);
sess1r=restMeanTime(ki,1);

sess2c=cueMeanTime(ki,2);
sess2r=restMeanTime(ki,2);
% stdevs
sig1c=cueStdTime(ki,1);
sig1r=restStdTime(ki,1);

sig2c=cueStdTime(ki,2);
sig2r=restStdTime(ki,2);

% generate
s1c = sess1c + sig1c.*randn(numSamples, 1);
s1r = sess1r + sig1r.*randn(numSamples, 1);

s2c = sess2c + sig2c.*randn(numSamples, 1);
s2r = sess2r + sig2r.*randn(numSamples, 1);

% 
